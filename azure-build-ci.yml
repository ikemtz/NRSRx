name: 8.1.$(DayOfYear)$(Rev:.rr)
pool:
  vmImage: "windows-latest"

variables:
  ALL_PROJECTS: "**/*.csproj"
  PACKAGE_PROJECTS: "src/**/*.csproj"
  TEST_PROJECTS: "**/*.Tests.csproj"
  TEMPLATE_PROJECTS: "templates/**/*.csproj"
  BUILDCONFIGURATION: "Debug"

jobs:
  - job: Database
    displayName: Database build and deploy
    pool:
      vmImage: "windows-latest"

    steps:
      - task: VSBuild@1
        displayName: "Build soultion NRSRx.DB.sln"
        inputs:
          solution: NRSRx.DB.sln

      - task: PowerShell@2
        displayName: "Artifact SQL Dacpacs"
        inputs:
          targetType: filePath
          filePath: "samples/IkeMtz.Samples.Db/artifact-dacpacs.ps1"
          arguments: "-artifactFolder $(build.artifactstagingdirectory)"

      - task: PublishBuildArtifacts@1
        displayName: "Publish Artifact: dacpac_drop"
        inputs:
          ArtifactName: "dacpac_drop"

  - job: APIs
    displayName: Build and test API code
    pool:
      vmImage: "windows-latest"

    steps:
      - checkout: self
        persistCredentials: true

      - task: UseDotNet@2
        displayName: "Use .NET Core sdk 8.0.x"
        inputs:
          version: 8.x

      - task: Bash@3
        displayName: "Setting development environment variables"
        inputs:
          targetType: "inline"
          script: "export DOTNET_ENVIRONMENT=Development && export ASPNETCORE_ENVIRONMENT=Development"

      - task: DotNetCoreCLI@2
        displayName: "dotnet restore"
        inputs:
          command: "restore"
          projects: "$(ALL_PROJECTS)"
          feedsToUse: "select"
          noCache: true
          verbosityRestore: "Minimal"

      - task: Assembly-Info-NetCore@2
        displayName: "Set Assembly Manifest Data"
        inputs:
          InsertAttributes: true
          VersionNumber: "$(Build.BuildNumber)"
          FileVersionNumber: "$(Build.BuildNumber)"
          InformationalVersion: "$(Build.BuildNumber)"
          PackageVersion: "$(Build.BuildNumber)"

      - task: SonarCloudPrepare@2
        displayName: "Prepare analysis on SonarCloud"
        inputs:
          SonarCloud: "SonarCloud IkeMtz"
          organization: ikemtz
          projectKey: NRSRx
          projectName: NRSRx
          extraProperties: |
            # Additional properties that will be passed to the scanner,
            # Put one key=value per line, example:
            # sonar.cs.vstest.reportsPaths=$(Agent.WorkFolder)/_temp/*.trx
            # sonar.branch.name=$(System.PullRequest.SourceBranch)
            # sonar.branch.target=$(System.PullRequest.TargetBranch)
            sonar.exclusions=templates/**
            sonar.coverage.exclusions=templates/**

      - task: DotNetCoreCLI@2
        displayName: "dotnet build"
        inputs:
          projects: "$(ALL_PROJECTS)"
          arguments: "--configuration $(BuildConfiguration) --no-restore"

      - task: DotNetCoreCLI@2
        displayName: "Tests"
        inputs:
          command: test
          projects: "$(TEST_PROJECTS)"
          arguments: '--configuration $(BuildConfiguration) --collect "Code coverage" --no-build --no-restore --settings $(Build.SourcesDirectory)/test.RunSettings --filter TestCategory!~Integration'

      - task: DotNetCoreCLI@2
        displayName: "Test - Sonar"
        inputs:
          command: custom
          projects: "$(TEST_PROJECTS)"
          custom: "test"
          arguments: '--logger trx --configuration $(BuildConfiguration) --collect "Code coverage" --results-directory $(Common.TestResultsDirectory) --no-build --no-restore --settings $(Build.SourcesDirectory)/test.RunSettings --filter TestCategory!~Integration'

      - task: SonarCloudAnalyze@2
        displayName: "Run Code Analysis"

      - task: SonarCloudPublish@2
        displayName: "Publish Quality Gate Result"

      - task: sonarcloud-buildbreaker@2
        displayName: "Break build on SonarCloud quality gate failure"
        inputs:
          SonarCloud: "SonarCloud IkeMtz"
          organization: "ikemtz"

      - task: DotNetCoreCLI@2
        displayName: Pack Symbols
        inputs:
          command: "pack"
          packagesToPack: "$(PACKAGE_PROJECTS)"
          configuration: "Debug"
          includesymbols: true
          includesource: true
          versioningScheme: byBuildNumber
          buildProperties: "version-suffix=symbols"
          verbosityPack: "Minimal"

      - task: PublishBuildArtifacts@1
        displayName: "Publish Artifact"
        inputs:
          ArtifactName: "symbol_drop"

      - task: DotNetCoreCLI@2
        inputs:
          command: "publish"
          publishWebProjects: false
          projects: "samples/IkeMtz.Samples.OData/IkeMtz.Samples.OData.csproj"
          arguments: "--runtime linux-x64 --output $(Build.ArtifactStagingDirectory)/odata --no-self-contained"
          zipAfterPublish: false
          modifyOutputPath: false
          workingDirectory: "samples/IkeMtz.Samples.OData/"

      - task: PublishBuildArtifacts@1
        displayName: "Publish Sample OData Artifact"
        inputs:
          PathtoPublish: "$(Build.ArtifactStagingDirectory)/odata"
          ArtifactName: "sample_odata_drop"
          publishLocation: "Container"

      - task: PublishBuildArtifacts@1
        displayName: "Publish Sample OData Artifact"
        inputs:
          PathtoPublish: "samples/IkeMtz.Samples.OData/ci.Dockerfile"
          ArtifactName: "sample_odata_drop"
          publishLocation: "Container"

      - task: DotNetCoreCLI@2
        inputs:
          command: "publish"
          publishWebProjects: false
          projects: "samples/IkeMtz.Samples.WebApi/IkeMtz.Samples.WebApi.csproj"
          arguments: "--runtime linux-x64 --output $(Build.ArtifactStagingDirectory)/webapi --no-self-contained"
          zipAfterPublish: false
          modifyOutputPath: false
          workingDirectory: "samples/IkeMtz.Samples.WebApi/"

      - task: PublishBuildArtifacts@1
        displayName: "Publish Sample WebApi Artifact"
        inputs:
          PathtoPublish: "$(Build.ArtifactStagingDirectory)/webapi"
          ArtifactName: "sample_webapi_drop"
          publishLocation: "Container"

      - task: PublishBuildArtifacts@1
        displayName: "Publish Sample WebApi Dockerfile"
        inputs:
          PathtoPublish: "samples/IkeMtz.Samples.WebApi/ci.Dockerfile"
          ArtifactName: "sample_webapi_drop"
          publishLocation: "Container"

      - task: GitTag@5
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        inputs:
          workingdir: "$(SYSTEM.DEFAULTWORKINGDIRECTORY)"
          tagUser: "ikemtz"
          tagEmail: "ikemtz@outlook.com"
          tag: "nrsrx-$(build.buildNumber)"
          tagMessage: "nrsrx-$(build.buildNumber)"
          useLightweightTags: true

  - job: mssql_integration_tests
    displayName: MSSQL Integration Tests
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
    dependsOn:
      - Database
    pool:
      vmImage: ubuntu-latest

    steps:
      - checkout: self
        persistCredentials: true
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: "current"
          artifactName: "dacpac_drop"
          targetPath: "samples/IkeMtz.Samples.Db/bin/Debug/"

      - task: Docker@2
        inputs:
          containerRegistry: "IkeMtz Docker Hub"
          repository: "ikemtz/nrsrx-sql"
          command: "buildAndPush"
          Dockerfile: "**/mssql-integration-tests-ci.Dockerfile"
          tags: "latest"

      - task: Bash@3
        displayName: Get SQL Integration Test Results
        inputs:
          targetType: "inline"
          script: "docker run -i --name=sql-results ikemtz/nrsrx-sql:latest & sleep 5 && docker cp sql-results:/test-results $(System.DefaultWorkingDirectory)/test-results"

      - task: Bash@3
        displayName: List SQL Integration Test Results
        inputs:
          targetType: "inline"
          script: "cd $(System.DefaultWorkingDirectory)/test-results && ls -R"

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: "VSTest"
          testResultsFiles: "**/*.trx"
          mergeTestResults: true
          failTaskOnFailedTests: true

      - task: PublishCodeCoverageResults@2
        inputs:
          summaryFileLocation: "**/coverage.cobertura.xml"
          failIfCoverageEmpty: false #https://github.com/coverlet-coverage/coverlet/issues/1390

  - job: redis_integration_tests
    displayName: Redis Integration Tests
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
    dependsOn:
      - Database
    pool:
      vmImage: ubuntu-latest

    steps:
      - checkout: self
        persistCredentials: true

      - task: Docker@2
        inputs:
          containerRegistry: "IkeMtz Docker Hub"
          repository: "ikemtz/nrsrx-redis"
          command: "buildAndPush"
          Dockerfile: "**/redis-integration-tests-ci.Dockerfile"
          tags: "latest"

      - task: Bash@3
        displayName: Get Redis Integration Test Results
        inputs:
          targetType: "inline"
          script: "docker run -i --name=redis-results ikemtz/nrsrx-redis:latest & sleep 5 && docker cp redis-results:/test-results $(System.DefaultWorkingDirectory)/test-results"

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: "VSTest"
          testResultsFiles: "**/*.trx"
          mergeTestResults: true
          failTaskOnFailedTests: true

      - task: PublishCodeCoverageResults@2
        inputs:
          summaryFileLocation: "**/coverage.cobertura.xml"
          failIfCoverageEmpty: true

trigger:
  batch: true
  branches:
    include:
      - master
pr:
  branches:
    include:
      - master
